import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id "java"
    id 'application'
    id "org.sonarqube" version "2.5"
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'docker'

project.ext {
    projectGroup = 'gov.ca.cwds.api'
    configPath = "$rootProject.projectDir/config/"
    springVersion = "1.5.19.RELEASE"
    springfoxSwaggerVersion = "2.9.0"
    projectMajorVersion = '4.1.0'
    mainclass = 'gov.ca.cwds.PerryApplication'
    targetDockerHubOrganization = System.env.DOCKERHUB_ORG ?: 'cwds'
    cwdsModelVersion = '3.16.0'
    powerMockVersion = "1.7.3"
    hikariCPVersion = "3.3.1"

    // assume that Windows users use the Docker Toolbox
    buildEnv = 'JENKINS'
    devDockerHost = 'localhost'
    devDockerPort = 2376

    isRelease = System.getProperty("Release") == "true"
    buildNumber = System.getProperty('BuildNumber')
    customVersion = System.getProperty('CustomVersion')

    projectSnapshotVersion = projectMajorVersion + "-SNAPSHOT"
    projectReleaseVersion = (customVersion == null || customVersion == "" || customVersion.startsWith('$') ? projectMajorVersion + '_' + buildNumber + '-RC' : customVersion )
    projectVersion = (isRelease ? projectReleaseVersion : projectSnapshotVersion )

    // Publishing configuration
    snapshotMavenRepo = "http://pr.dev.cwds.io/artifactory/repo"
    releaseMavenRepo = "http://pr.dev.cwds.io/artifactory/libs-release"
    artifactoryRepo = (isRelease ? releaseMavenRepo : snapshotMavenRepo)

    shiroVersion = '1.2.3'
    guiceVersion = '4.0'
    jacksonVersion = '2.8.7'
    servletApiVersion = '3.1.0'

    commonsLangVersion = '3.6'
    commonsCollectionsVersion = '4.2'
    commonsIoVersion = '2.5'
    serenityVersion = '1.9.13'

}

 if (System.getProperty('newVersion') && System.getProperty('newVersion')!='null') {
    def newVersion = "${System.getProperty('newVersion')}"
    version = newVersion
    projectMajorVersion = newVersion
    projectVersion = newVersion
  } else {
    version = projectVersion
}

def dockerTag = projectVersion
group = projectGroup

description = """perry"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

println "Release: " + isRelease
println "Build: " + buildNumber
println "Project Version: " + projectVersion
println "Project Major Version: " + projectMajorVersion

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
        //sonar doesn't recognize AOP and shiro library!!!
        property "sonar.exclusions", "/src/main/java/gov/ca/cwds/security/**"
    }
}

//version = projectVersion
mainClassName = mainclass

bootRepackage {
    mainClass = 'gov.ca.cwds.PerryApplication'
}

repositories {
    mavenLocal()
    maven {
        url "http://pr.dev.cwds.io/artifactory/repo"
    }
}

springBoot {
    buildInfo {
        additionalProperties = [
                version: projectVersion,
                buildNumber: ""+buildNumber,
                time: buildTime()
        ]
    }
}

def buildTime() {
    final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    dateFormat.timeZone = TimeZone.getTimeZone('PDT')
    dateFormat.format(new Date())
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version:springVersion
    compile ('org.springframework.boot:spring-boot-starter-data-jpa:' + springVersion) {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    compile group: 'com.zaxxer', name: 'HikariCP', version: hikariCPVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version:springVersion
    compile group:"org.springframework.boot", name:"spring-boot-starter-actuator", version:springVersion
    compile group:"org.springframework.boot", name:"spring-boot-starter-data-redis", version:springVersion

    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version:'2.0.13.RELEASE'
    compile group: 'org.springframework.session', name: 'spring-session', version:'1.3.1.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework.retry/spring-retry
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.2.RELEASE'

    compile group: 'org.webjars', name: 'angularjs', version:'1.4.3'
    compile group: 'org.webjars', name: 'jquery', version:'2.1.1'
    compile group: 'org.webjars', name: 'bootstrap', version:'3.2.0'
    compile group: 'org.webjars', name: 'webjars-locator', version:'0.32'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwaggerVersion
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxSwaggerVersion
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.11'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.3'
    compile group: 'com.newrelic.agent.java', name: 'newrelic-api', version: "3.41.0"

    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.325'

    //h2 dev mode
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'

    compile group: 'com.ibm', name: 'db2jcc4', version: '4.21.29'
    compile group: 'com.ibm', name: 'db2jcc_license_cisuz', version: '4.0.0'

    compile group: 'org.hibernate', name: 'hibernate-java8', version: '5.0.12.Final'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.2.v20170220'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.2.v20170220'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212.jre7'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6"
    compile group: 'org.apache.commons', name: 'commons-collections4', version: commonsCollectionsVersion
    
    compile project(':jwt-security')

    compile group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2'
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version:springVersion) {
            exclude(module: 'commons-logging')
    }

    testCompile 'org.springframework.security:spring-security-test:4.2.6.RELEASE'
    testCompile 'org.mockito:mockito-core:2.8.9'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
    testCompile 'org.ow2.asm:asm-all:5.1'
    testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.0.5'

    testCompile group: 'gov.ca.cwds', name: 'cws-cms-data-model', version: cwdsModelVersion, changing: true

    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: powerMockVersion
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: powerMockVersion
}

test {
    exclude '**/smoketest/**'
}

task smokeTest(type: Test) {
    systemProperty 'perry.health.check.url', project.property('perry.health.check.url')
    include '**/smoketest/**'
}

publish.dependsOn ':api-security:publish'

def isPortOpen(host, port) {
    try {
        Socket socket = new Socket(host, port)
        socket.close()
        return true
    } catch (IOException e) {
        return false
    }
}

project.ext.dockerEnvVars = project.buildEnv != 'WIN_DEV' ? [:] : [
        DOCKER_CERT_PATH: System.getProperty("user.home") + '/.docker/machine/machines/default',
        DOCKER_HOST: "tcp://$project.devDockerHost:$project.devDockerPort",
        DOCKER_MACHINE_NAME: 'default',
        DOCKER_TLS_VERIFY: '1',
        COMPOSE_CONVERT_WINDOWS_PATHS: 'true'
]

// reused in sub-modules
task checkDockerService {
    enabled = project.buildEnv == 'WIN_DEV'
    doFirst {
        if (!isPortOpen(project.devDockerHost, project.devDockerPort)) {
            throw new GradleException('Docker service is not available. Windows users should start Docker Quickstart Terminal of Docker Toolbox')
        }
    }
}

processResources {
     filter(ReplaceTokens, tokens: [
             'build.version': projectVersion as String,
             'build.number' : (System.getenv("BUILD_NUMBER") ?: "IDE")
     ])
 }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            url artifactoryRepo
        }
    }
}

task publishDocker(dependsOn: ':docker-perry:dockerPerryPublish') {
    doLast {
        println 'Docker published'
    }
}

task publishLatestDocker(dependsOn: ':docker-perry:dockerPerryPublishLatest') {
    doLast {
        println 'Docker published'
    }
}

task buildDocker(dependsOn: ':docker-perry:dockerCreateImage') {
    doLast {
        println 'Docker built'
    }
}

task publishGit(dependsOn: ':docker-perry:pushGitTag') {
    doLast {
        println 'Docker published'
    }
}

task integrationTestDev(dependsOn: ':integration-tests:testDevMode') {
    doLast {
        println 'Integration Test Passed'
    }
}

task integrationTestProd(dependsOn: ':integration-tests:testCognitoMode') {
    doLast {
        println 'Integration Test Passed'
    }
}

task integrationTestProdWithMFA(dependsOn: ':integration-tests:testCognitoWithMFAMode') {
    doLast {
        println 'Integration Test With MFA Passed'
    }
}

javadoc {
    options.addStringOption("charset", "UTF-8")
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
}

task copyConfigToTestResources(type: Copy) {
    from 'config'
    into 'src/test/resources/scripts'
    include 'idm.groovy', 'cognito.groovy', 'default.groovy'
}

test.dependsOn copyConfigToTestResources